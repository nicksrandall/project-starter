!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("angular"),require("jquery"),require("lodash"));else if("function"==typeof define&&define.amd)define(["angular","jquery","lodash"],n);else{var t="object"==typeof exports?n(require("angular"),require("jquery"),require("lodash")):n(e.angular,e.$,e._);for(var r in t)("object"==typeof exports?exports:e)[r]=t[r]}}(this,function(e,n,t){return function(e){function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var t={};return n.m=e,n.c=t,n.p="/dist/",n(0)}([function(e,n,t){{var r=t(1);t(2),t(3)}t(4),r.module("project",[t(9)(r)])},function(n,t){n.exports=e},function(e,t){e.exports=n},function(e,n){e.exports=t},function(e,n,t){t(5)},function(e,n,t){var r=t(6);"string"==typeof r&&(r=[[e.id,r,""]]);t(8)(r,{});r.locals&&(e.exports=r.locals)},function(e,n,t){n=e.exports=t(7)(),n.push([e.id,".default-text {\n  color: #555; }\n","",{version:3,sources:["common/app/common/scss/main.scss","common/app/common/scss/mixins/_mixins.scss","common/app/common/scss/mixins/_variables.scss"],names:[],mappings:"AAGA;ECAE,YCFe,EFEF",file:"common/scss/main.scss",sourcesContent:['// load common styles\n@import "mixins/mixins";\n\n.default-text {\n  @include default-text-color;\n}\n','@import "variables";\n\n@mixin default-text-color() {\n  color: $text-color;\n}',"// common variables\n$text-color: #555;"]}])},function(e,n){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],n=0;n<this.length;n++){var t=this[n];e.push(t[2]?"@media "+t[2]+"{"+t[1]+"}":t[1])}return e.join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(r[s]=!0)}for(o=0;o<n.length;o++){var i=n[o];"number"==typeof i[0]&&r[i[0]]||(t&&!i[2]?i[2]=t:t&&(i[2]="("+i[2]+") and ("+t+")"),e.push(i))}},e}},function(e,n,t){function r(e,n){for(var t=0;t<e.length;t++){var r=e[t],o=l[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(a(r.parts[s],n))}else{for(var i=[],s=0;s<r.parts.length;s++)i.push(a(r.parts[s],n));l[r.id]={id:r.id,refs:1,parts:i}}}}function o(e){for(var n=[],t={},r=0;r<e.length;r++){var o=e[r],s=o[0],i=o[1],a=o[2],c=o[3],u={css:i,media:a,sourceMap:c};t[s]?t[s].parts.push(u):n.push(t[s]={id:s,parts:[u]})}return n}function s(){var e=document.createElement("style"),n=m();return e.type="text/css",n.appendChild(e),e}function i(){var e=document.createElement("link"),n=m();return e.rel="stylesheet",n.appendChild(e),e}function a(e,n){var t,r,o;if(n.singleton){var a=h++;t=v||(v=s()),r=c.bind(null,t,a,!1),o=c.bind(null,t,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=i(),r=f.bind(null,t),o=function(){t.parentNode.removeChild(t),t.href&&URL.revokeObjectURL(t.href)}):(t=s(),r=u.bind(null,t),o=function(){t.parentNode.removeChild(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}function c(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(n,o);else{var s=document.createTextNode(o),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(s,i[n]):e.appendChild(s)}}function u(e,n){{var t=n.css,r=n.media;n.sourceMap}if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}function f(e,n){var t=n.css,r=(n.media,n.sourceMap);r&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([t],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}var l={},p=function(e){var n;return function(){return"undefined"==typeof n&&(n=e.apply(this,arguments)),n}},d=p(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),m=p(function(){return document.head||document.getElementsByTagName("head")[0]}),v=null,h=0;e.exports=function(e,n){n=n||{},"undefined"==typeof n.singleton&&(n.singleton=d());var t=o(e);return r(t,n),function(e){for(var s=[],i=0;i<t.length;i++){var a=t[i],c=l[a.id];c.refs--,s.push(c)}if(e){var u=o(e);r(u,n)}for(var i=0;i<s.length;i++){var c=s[i];if(0===c.refs){for(var f=0;f<c.parts.length;f++)c.parts[f]();delete l[c.id]}}}};var x=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}()},function(e,n,t){e.exports=function(e){t(10);var n="project.submodule",r=e.module(n,[]);return t(12)(r),t(13)(r),n}},function(e,n,t){var r=t(11);"string"==typeof r&&(r=[[e.id,r,""]]);t(8)(r,{});r.locals&&(e.exports=r.locals)},function(e,n,t){n=e.exports=t(7)(),n.push([e.id,".feature-container {\n  color: #555; }\n","",{version:3,sources:["app/feature/_feature.scss","app/common/scss/mixins/_variables.scss"],names:[],mappings:"AAEA;EACE,YCFe,EDCG",file:"feature/_feature.scss",sourcesContent:['@import "../common/scss/mixins/mixins";\n\n.feature-container {\n  color: $text-color;\n}',"// common variables\n$text-color: #555;"]}])},function(e,n){var t=function(){function e(){this.bindMe="Hello World"}return e}();e.exports=function(e){e.controller("FeatureCtrl",t)}},function(e,n,t){e.exports=function(e){e.directive("featureName",["$timeout",function(e){return{restrict:"EA",template:t(14),link:function(e,n,t){e.bindMe="hello world"}}}])}},function(e,n){e.exports='<div class="feature-container">{{bindMe}}</div>'}])});
//# sourceMappingURL=data:application/json;base64,