!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("angular"),require("jquery"),require("lodash"));else if("function"==typeof define&&define.amd)define(["angular","jquery","lodash"],t);else{var n="object"==typeof exports?t(require("angular"),require("jquery"),require("lodash")):t(e.angular,e.$,e._);for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,function(e,t,n){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="/dist/",t(0)}([function(e,t,n){{var r=n(1);n(2),n(3)}n(4),r.module("project",[n(9)(r)])},function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t){e.exports=n},function(e,t,n){n(5)},function(e,t,n){var r=n(6);"string"==typeof r&&(r=[[e.id,r,""]]);n(8)(r,{});r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(7)(),t.push([e.id,".default-text {\n  color: #555; }\n","",{version:3,sources:["common/app/common/scss/main.scss","common/app/common/scss/mixins/_mixins.scss","common/app/common/scss/mixins/_variables.scss"],names:[],mappings:"AAGA;ECAE,YCFe,EFEF",file:"common/scss/main.scss",sourcesContent:['// load common styles\n@import "mixins/mixins";\n\n.default-text {\n  @include default-text-color;\n}\n','@import "variables";\n\n@mixin default-text-color() {\n  color: $text-color;\n}',"// common variables\n$text-color: #555;"]}])},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];e.push(n[2]?"@media "+n[2]+"{"+n[1]+"}":n[1])}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(r[s]=!0)}for(o=0;o<t.length;o++){var i=t[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),e.push(i))}},e}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=l[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(a(r.parts[s],t))}else{for(var i=[],s=0;s<r.parts.length;s++)i.push(a(r.parts[s],t));l[r.id]={id:r.id,refs:1,parts:i}}}}function o(e){for(var t=[],n={},r=0;r<e.length;r++){var o=e[r],s=o[0],i=o[1],a=o[2],c=o[3],u={css:i,media:a,sourceMap:c};n[s]?n[s].parts.push(u):t.push(n[s]={id:s,parts:[u]})}return t}function s(){var e=document.createElement("style"),t=m();return e.type="text/css",t.appendChild(e),e}function i(){var e=document.createElement("link"),t=m();return e.rel="stylesheet",t.appendChild(e),e}function a(e,t){var n,r,o;if(t.singleton){var a=h++;n=v||(v=s()),r=c.bind(null,n,a,!1),o=c.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=i(),r=f.bind(null,n),o=function(){n.parentNode.removeChild(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(),r=u.bind(null,n),o=function(){n.parentNode.removeChild(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}function c(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var s=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(s,i[t]):e.appendChild(s)}}function u(e,t){{var n=t.css,r=t.media;t.sourceMap}if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function f(e,t){var n=t.css,r=(t.media,t.sourceMap);r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([n],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}var l={},p=function(e){var t;return function(){return"undefined"==typeof t&&(t=e.apply(this,arguments)),t}},d=p(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),m=p(function(){return document.head||document.getElementsByTagName("head")[0]}),v=null,h=0;e.exports=function(e,t){t=t||{},"undefined"==typeof t.singleton&&(t.singleton=d());var n=o(e);return r(n,t),function(e){for(var s=[],i=0;i<n.length;i++){var a=n[i],c=l[a.id];c.refs--,s.push(c)}if(e){var u=o(e);r(u,t)}for(var i=0;i<s.length;i++){var c=s[i];if(0===c.refs){for(var f=0;f<c.parts.length;f++)c.parts[f]();delete l[c.id]}}}};var x=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t,n){e.exports=function(e){"use strict";n(10);var t="project.submodule",r=e.module(t,[]);return n(12)(r),n(13)(r),t}},function(e,t,n){var r=n(11);"string"==typeof r&&(r=[[e.id,r,""]]);n(8)(r,{});r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(7)(),t.push([e.id,".feature-container {\n  color: #555; }\n","",{version:3,sources:["app/feature/_feature.scss","app/common/scss/mixins/_variables.scss"],names:[],mappings:"AAEA;EACE,YCFe,EDCG",file:"feature/_feature.scss",sourcesContent:['@import "../common/scss/mixins/mixins";\n\n.feature-container {\n  color: $text-color;\n}',"// common variables\n$text-color: #555;"]}])},function(e,t){var n=function(){function e(){this.bindMe="Hello World"}return e}();e.exports=function(e){e.controller("FeatureCtrl",n)}},function(e,t,n){e.exports=function(e){e.directive("featureName",["$timeout",function(e){return{restrict:"EA",template:n(14),link:function(e,t,n){e.bindMe="hello world"}}}])}},function(e,t){e.exports='<div class="feature-container">{{bindMe}}</div>'}])});
//# sourceMappingURL=data:application/json;base64,